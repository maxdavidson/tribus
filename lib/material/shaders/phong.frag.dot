precision mediump float;


{{## def.calcLight:

    vec3 diffuse = light.diffuse * materialDiffuse * max(dot(worldNormal2, lightDir), 0.0);

    vec3 reflectDir = reflect(-lightDir, worldNormal2);
    vec3 specular = light.specular * materialSpecular * pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);

    vec3 shade = diffuse + specular;
#}}


{{## def.calcDirectionalLight:
    vec3 lightDir = -light.direction;

    {{# def.calcLight }}
#}}


{{## def.calcPointLight:
    vec3 direction = light.position - worldFragPos;
    float distance = length(direction);

    vec3 lightDir = direction / distance;

    {{# def.calcLight }}

    float attenuation = 1.0 / (light.constant + distance * (light.linear + distance * light.quadratic));

    shade *= attenuation;
#}}

{{## def.calcSpotLight:
    {{# def.calcPointLight }}

    float theta = dot(lightDir, light.direction);
    float epsilon = light.cutoff - light.outerCutoff;
    float intensity = clamp((theta - light.outerCutoff) / epsilon, 0.0, 1.0);

    shade *= intensity;
#}}


struct DirectionalLight {
    vec3  direction;
    vec3  diffuse, specular;
};

struct PointLight {
    vec3  position;
    vec3  diffuse, specular;
    float constant, linear, quadratic;
};

struct SpotLight {
    vec3  position, direction;
    vec3  diffuse, specular;
    float cutoff, outerCutoff;
    float constant, linear, quadratic;
};

struct Material {
    lowp float shininess;
    {{? it.ambient === 'static' }} vec3 ambient; {{?}}
    {{? it.diffuse === 'static' }} vec3 diffuse; {{?}}
    {{? it.specular === 'static' }} vec3 specular; {{?}}
};


varying vec3 worldFragPos;
varying vec3 worldNormal;

uniform vec3 viewPos;

{{? it.ambient === 'texture' || it.diffuse === 'texture' || it.specular === 'texture' }}
    varying vec2 lerpTexcoords;
{{?}}

{{? it.ambient === 'texture' }}
    uniform sampler2D ambientSampler;
    uniform vec4 ambientTexcoordBounds;
{{?}}

{{? it.diffuse === 'texture' }}
    uniform sampler2D diffuseSampler;
    uniform vec4 diffuseTexcoordBounds;
{{?}}

{{? it.specular === 'texture' }}
    uniform sampler2D specularSampler;
    uniform vec4 specularTexcoordBounds;
{{?}}

{{? it.MAX_DIRECTIONAL_LIGHTS }}
    uniform DirectionalLight directionalLights[{{= it.MAX_DIRECTIONAL_LIGHTS }}];
{{?}}

{{? it.MAX_POINT_LIGHTS }}
    uniform PointLight pointLights[{{= it.MAX_POINT_LIGHTS }}];
{{?}}

{{? it.MAX_SPOT_LIGHTS }}
    uniform SpotLight spotLights[{{= it.MAX_SPOT_LIGHTS }}];
{{?}}

uniform Material material;
uniform vec3 environmentAmbient;


vec3 calcDiffuse(vec3 lightDiffuse, vec3 lightDir, vec3 normal) {
    return lightDiffuse * max(dot(normal, lightDir), 0.0);
}

vec3 calcSpecular(vec3 lightSpecular, vec3 lightDir, vec3 normal, float shininess, vec3 viewDir) {
    return lightSpecular * max(pow(dot(viewDir, reflect(-lightDir, normal)), shininess), 0.0);
}


vec3 calcDirectionalLights(vec3 materialDiffuse, vec3 materialSpecular, vec3 normal, vec3 viewDir) {
    vec3 diffuse = vec3(0.0, 0.0, 0.0);
    vec3 specular = vec3(0.0, 0.0, 0.0);

    for (int i = 0; i < {{= it.MAX_DIRECTIONAL_LIGHTS }}; ++i) {
        DirectionalLight light = directionalLights[i];
        vec3 lightDir = -light.direction;

        diffuse += calcDiffuse(light.diffuse, lightDir, normal);
        specular += calcSpecular(light.specular, lightDir, normal, material.shininess, viewDir);
    }

    return materialDiffuse * diffuse + materialSpecular * specular;
}


vec3 calcPointLights(vec3 materialDiffuse, vec3 materialSpecular, vec3 normal, vec3 viewDir) {
    vec3 shade = vec3(0.0, 0.0, 0.0);

    for (int i = 0; i < {{= it.MAX_POINT_LIGHTS }}; ++i) {
        PointLight light = pointLights[i];

        vec3 direction = light.position - worldFragPos;
        float distance = length(direction);
        vec3 lightDir = direction / distance;

        vec3 diffuse = materialDiffuse * calcDiffuse(light.diffuse, lightDir, normal);
        vec3 specular = materialSpecular * calcSpecular(light.specular, lightDir, normal, material.shininess, viewDir);

        float attenuation = 1.0 / (light.constant + distance * (light.linear + distance * light.quadratic));

        shade += (diffuse + specular) * attenuation;
    }

    return shade;
}


vec3 calcSpotLights(vec3 materialDiffuse, vec3 materialSpecular, vec3 normal, vec3 viewDir) {
    vec3 shade = vec3(0.0, 0.0, 0.0);

    for (int i = 0; i < {{= it.MAX_SPOT_LIGHTS }}; ++i) {
        SpotLight light = spotLights[i];

        vec3 direction = light.position - worldFragPos;
        float distance = length(direction);
        vec3 lightDir = direction / distance;

        vec3 diffuse = materialDiffuse * calcDiffuse(light.diffuse, lightDir, normal);
        vec3 specular = materialSpecular * calcSpecular(light.specular, lightDir, normal, material.shininess, viewDir);

        float attenuation = 1.0 / (light.constant + distance * (light.linear + distance * light.quadratic));
        float theta = dot(lightDir, light.direction);
        float epsilon = light.cutoff - light.outerCutoff;
        float intensity = clamp((theta - light.outerCutoff) / epsilon, 0.0, 1.0);

        shade += (diffuse + specular) * attenuation * intensity;
    }

    return shade;
}




void main() {

    {{? it.ambient === 'texture' || it.diffuse === 'texture' || it.specular === 'texture' }}
        vec2 fixedLerpTexcoords = fract(lerpTexcoords);
    {{?}}


    {{? it.ambient === 'texture' }}
        vec2 ambientTexcoord = ambientTexcoordBounds.xy + fixedLerpTexcoords * ambientTexcoordBounds.zw;
        vec3 materialAmbient = texture2D(ambientSampler, ambientTexcoord).stp;
    {{??}}
        vec3 materialAmbient = material.ambient;
    {{?}}

    {{? it.diffuse === 'texture' }}
        vec2 diffuseTexcoord = diffuseTexcoordBounds.xy + fixedLerpTexcoords * diffuseTexcoordBounds.zw;
        vec3 materialDiffuse = texture2D(diffuseSampler, diffuseTexcoord).stp;
    {{??}}
        vec3 materialDiffuse = material.diffuse;
    {{?}}

    {{? it.specular === 'texture' }}
        vec2 specularTexcoord = specularTexcoordBounds.xy + fixedLerpTexcoords * specularTexcoordBounds.zw;
        vec3 materialSpecular = texture2D(specularSampler, specularTexcoord).stp;
    {{??}}
        vec3 materialSpecular = material.specular;
    {{?}}

    vec3 worldNormal2 = normalize(worldNormal);

    // Direction from fragment to camera
    vec3 viewDir = normalize(viewPos - worldFragPos);
    vec3 shade = materialAmbient * environmentAmbient;

    {{? it.MAX_DIRECTIONAL_LIGHTS }}
        shade += calcDirectionalLights(materialDiffuse, materialSpecular, worldNormal2, viewDir);
    {{?}}

    {{? it.MAX_POINT_LIGHTS }}
        shade += calcPointLights(materialDiffuse, materialSpecular, worldNormal2, viewDir);
    {{?}}

    {{? it.MAX_SPOT_LIGHTS }}
        shade += calcSpotLights(materialDiffuse, materialSpecular, worldNormal2, viewDir);
    {{?}}

    gl_FragColor = vec4(shade, 1.0);
}
