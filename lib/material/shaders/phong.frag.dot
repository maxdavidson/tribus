{{## def.materialAmbient: {{? it.ambient === 'texture' }} texture2D(ambientSampler, ambientTexcoord).stp {{??}} material.ambient {{?}} #}}
{{## def.materialDiffuse: {{? it.diffuse === 'texture' }} texture2D(diffuseSampler, diffuseTexcoord).stp {{??}} material.diffuse {{?}} #}}
{{## def.materialSpecular: {{? it.specular === 'texture' }} texture2D(specularSampler, specularTexcoord).stp {{??}} material.specular {{?}} #}}


{{## def.calcLight:

    vec3 diffuse = light.diffuse * {{# def.materialDiffuse }} * max(dot(worldNormal2, lightDir), 0.0);

    //vec3 halfDir = normalize(lightDir + viewDir);
    //vec3 specular = light.specular * {{# def.materialSpecular }} * pow(max(dot(halfDir, worldNormal2), 0.0), material.shininess);

    vec3 reflectDir = reflect(-lightDir, worldNormal2);
    vec3 specular = light.specular * {{# def.materialSpecular }} * pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);

    vec3 shade = diffuse + specular;
#}}


{{## def.calcDirectionalLight:
    vec3 lightDir = -light.direction;

    {{# def.calcLight }}
#}}


{{## def.calcPointLight:
    vec3 direction = light.position - worldFragPos;
    float distance = length(direction);

    vec3 lightDir = direction / distance;

    {{# def.calcLight }}

    float attenuation = 1.0 / (light.constant + distance * (light.linear + distance * light.quadratic));

    shade += attenuation;
#}}

{{## def.calcSpotLight:
    {{# def.calcPointLight }}

    float theta = dot(lightDir, light.direction);
    float epsilon = light.cutoff - light.outerCutoff;
    float intensity = clamp((theta - light.outerCutoff) / epsilon, 0.0, 1.0);

    shade *= intensity;
#}}

precision mediump float;

struct DirectionalLight {
    vec3  direction;
    vec3  diffuse, specular;
};

struct PointLight {
    vec3  position;
    vec3  diffuse, specular;
    float constant, linear, quadratic;
};

struct SpotLight {
    vec3  position, direction;
    vec3  diffuse, specular;
    float cutoff, outerCutoff;
    float constant, linear, quadratic;
};

struct Material {
    lowp float shininess;
    {{? it.ambient === 'static' }} vec3 ambient; {{?}}
    {{? it.diffuse === 'static' }} vec3 diffuse; {{?}}
    {{? it.specular === 'static' }} vec3 specular; {{?}}
};


varying vec3 worldFragPos;
varying vec3 worldNormal;

uniform vec3 viewPos;

{{? it.ambient === 'texture' }}
uniform sampler2D ambientSampler;
varying vec2 ambientTexcoord;
{{?}}

{{? it.diffuse === 'texture' }}
uniform sampler2D diffuseSampler;
varying vec2 diffuseTexcoord;
{{?}}

{{? it.specular === 'texture' }}
uniform sampler2D specularSampler;
varying vec2 specularTexcoord;
{{?}}

{{? it.MAX_DIRECTIONAL_LIGHTS }}
    uniform DirectionalLight directionalLights[{{= it.MAX_DIRECTIONAL_LIGHTS }}];
{{?}}

{{? it.MAX_POINT_LIGHTS }}
    uniform PointLight pointLights[{{= it.MAX_POINT_LIGHTS }}];
{{?}}

{{? it.MAX_SPOT_LIGHTS }}
    uniform SpotLight spotLights[{{= it.MAX_SPOT_LIGHTS }}];
{{?}}

uniform Material material;
uniform vec3 environmentAmbient;

void main() {

    vec3 worldNormal2 = normalize(worldNormal);

    // Direction from fragment to camera
    vec3 viewDir = normalize(viewPos - worldFragPos);
    vec3 color = environmentAmbient + {{# def.materialAmbient }};

    {{? it.MAX_DIRECTIONAL_LIGHTS }}
        for (int i = 0; i < {{= it.MAX_DIRECTIONAL_LIGHTS }}; ++i) {
            DirectionalLight light = directionalLights[i];
            {{# def.calcDirectionalLight }}
            color += shade;
        }
    {{?}}

    {{? it.MAX_POINT_LIGHTS }}
        for (int i = 0; i < {{= it.MAX_POINT_LIGHTS }}; ++i) {
            PointLight light = pointLights[i];
            {{# def.calcPointLight }}
            color += shade;
        }
    {{?}}

    {{? it.MAX_SPOT_LIGHTS }}
        for (int i = 0; i < {{= it.MAX_SPOT_LIGHTS }}; ++i) {
            SpotLight light = spotLights[i];
            {{# def.calcSpotLight }}
            color += shade;
        }
    {{?}}

    gl_FragColor = vec4(color, 1.0);
}
